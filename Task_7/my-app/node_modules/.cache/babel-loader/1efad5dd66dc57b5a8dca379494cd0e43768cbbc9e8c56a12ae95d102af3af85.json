{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\PePeGa\\\\Desktop\\\\intership\\\\intership\\\\Task_7\\\\my-app\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ImageCropper = () => {\n  _s();\n  const [image, setImage] = useState(\"https://buffer.com/cdn-cgi/image/w=1000,fit=contain,q=90,f=auto/library/content/images/size/w1200/2023/10/free-images.jpg\");\n  const cropImage = useRef(\"\");\n  const cropperInstance = useRef();\n  const [finalImage, setFinalImage] = useState(\"\");\n  const getCropData = () => {\n    if (cropperInstance.current) {\n      const croppedCanvas = cropperInstance.current.getCroppedCanvas();\n      setImage(croppedCanvas.toDataURL());\n      setCropMode(false);\n    }\n  };\n  const [cropMode, setCropMode] = useState(false);\n  const startCropping = () => {\n    setCropMode(true);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Image Cropper\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!cropMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startCropping,\n        children: \"Start Cropping\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this), cropMode && /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getCropData,\n        children: \"Crop Image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [!cropMode && image && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: image,\n        alt: \"original\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 32\n      }, this), cropMode && /*#__PURE__*/_jsxDEV(Cropper, {\n        initialAspectRatio: 1,\n        src: image,\n        background: false,\n        responsive: true,\n        onInitialized: instance => {\n          cropperInstance.current = instance;\n        },\n        zoomable: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this), finalImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: finalImage,\n        alt: \"cropped\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(ImageCropper, \"FtxqtW3sUyJtuO2uPt7nH+N1fpA=\");\n_c = ImageCropper;\nexport default ImageCropper;\nvar _c;\n$RefreshReg$(_c, \"ImageCropper\");","map":{"version":3,"names":["React","useRef","useState","Cropper","jsxDEV","_jsxDEV","Fragment","_Fragment","ImageCropper","_s","image","setImage","cropImage","cropperInstance","finalImage","setFinalImage","getCropData","current","croppedCanvas","getCroppedCanvas","toDataURL","setCropMode","cropMode","startCropping","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","alt","initialAspectRatio","background","responsive","onInitialized","instance","zoomable","_c","$RefreshReg$"],"sources":["C:/Users/PePeGa/Desktop/intership/intership/Task_7/my-app/src/App.tsx"],"sourcesContent":["import React, { useRef, useState } from \"react\";\nimport Cropper from \"react-cropper\";\nimport \"cropperjs/dist/cropper.css\";\n\nconst ImageCropper = () => {\n  const [image, setImage] = useState(\"https://buffer.com/cdn-cgi/image/w=1000,fit=contain,q=90,f=auto/library/content/images/size/w1200/2023/10/free-images.jpg\");\n  const cropImage = useRef<string>(\"\");\n  const cropperInstance = useRef<Cropper>();\n  const [finalImage, setFinalImage] = useState(\"\");\n\n  const getCropData = () => {\n    if (cropperInstance.current) {\n      const croppedCanvas = cropperInstance.current.getCroppedCanvas();\n      setImage(croppedCanvas.toDataURL());\n      setCropMode(false); \n    }\n  };\n  const [cropMode, setCropMode] = useState(false);\n\n  const startCropping = () => {\n    setCropMode(true);\n  };\n  \n  return (\n    <>\n      <div>Image Cropper</div>\n      <div>\n        {!cropMode && (\n          <button onClick={startCropping}>\n            Start Cropping\n          </button>\n        )}\n        {cropMode && (\n          <button onClick={getCropData}>\n            Crop Image\n          </button>\n        )}\n      </div>\n      <div>\n        {!cropMode && image && <img src={image} alt=\"original\"/>}\n        {cropMode && (\n          <Cropper\n            initialAspectRatio={1}\n            src={image}\n            background={false}\n            responsive={true}\n            onInitialized={(instance: any) => {\n              cropperInstance.current = instance;\n            }}\n            zoomable={false}\n          />\n        )}\n        {finalImage && (\n          <img\n            src={finalImage}\n            alt=\"cropped\"\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ImageCropper;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}